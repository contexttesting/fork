<types>
  <import name="ForkOptions" from="child_process"/>
  <type name="ForkConfig" desc="Parameters for forking.">
    <prop string name="module">
      The path to the module to fork.
    </prop>
    <prop opt name="getArgs" type="(args: string[], ...contexts?: Context[]) => string[]|Promise.<string[]>">
      The function to get arguments to pass the fork based on the parsed mask input and contexts.
    </prop>
    <prop opt name="getOptions" type="(...contexts?: Context[]) => ForkOptions">
      The function to get options for the fork, such as `ENV` and `cwd`, based on contexts.
    </prop>
    <prop opt name="options" type="ForkOptions">
      Options for the forked processed, such as `ENV` and `cwd`.
    </prop>
    <prop opt name="inputs" type="[RegExp, string][]">
      Inputs to push to `stdin` when `stdout` writes data. The inputs are kept on stack, and taken off the stack when the RegExp matches the written data.
    </prop>
    <prop opt name="stderrInputs" type="[RegExp, string][]">
      Inputs to push to `stdin` when `stderr` writes data (similar to `inputs`).
    </prop>
    <prop name="log" default="false" type="boolean|{stderr: Writable, stdout: Writable}">
      Whether to pipe data from `stdout`, `stderr` to the process's streams. If an object is passed, the output will be piped to streams specified as its `stdout` and `stderr` properties.
    </prop>
    <prop boolean name="includeAnswers" default="true">
      Whether to add the answers to the `stderr` and `stdout` output.
    </prop>
  </type>
</types>
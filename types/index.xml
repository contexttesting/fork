<types namespace="_contextTesting">
  <import name="ForkOptions" from="child_process"/>

  <type name="ForkConfig" desc="Parameters for forking.">
    <prop string name="module">
      The path to the module to fork.
    </prop>
    <prop opt name="getArgs" type="function(!Array<string>, ..._contextTesting.Context): !Array<string>|!Promise<!Array<string>>">
      The function to get arguments to pass the fork based on the parsed mask input and contexts.
    </prop>
    <prop opt name="getOptions" type="function(..._contextTesting.Context): !child_process.ForkOptions">
      The function to get options for the fork, such as `ENV` and `cwd`, based on contexts.
    </prop>
    <prop opt name="options" type="!child_process.ForkOptions">
      Options for the forked processed, such as `ENV` and `cwd`.
    </prop>
    <prop opt name="inputs" type="Array<[RegExp, string]>" closure="!Array<!Array<(!RegExp|string)>>">
      Inputs to push to `stdin` when `stdout` writes data. The inputs are kept on stack, and taken off the stack when the RegExp matches the written data, e.g., `[[/question/, 'answer'], [/question2/, 'answer2']]`.
    </prop>
    <prop opt name="stderrInputs" type="Array<[RegExp, string]>" closure="!Array<!Array<(!RegExp|string)>>">
      Inputs to push to `stdin` when `stderr` writes data (similar to `inputs`), e.g., `[[/question/, 'answer'], [/question2/, 'answer2']]`.
    </prop>
    <prop name="log" default="false" type="boolean|{stderr: Writable, stdout: Writable}">
      Whether to pipe data from `stdout`, `stderr` to the process's streams. If an object is passed, the output will be piped to streams specified as its `stdout` and `stderr` properties.
    </prop>
    <prop boolean name="includeAnswers" default="true">
      Whether to add the answers to the `stderr` and `stdout` output.
    </prop>
    <prop boolean name="stripAnsi" default="true">
      Remove ANSI escape sequences from the `stdout` and `stderr` prior to checking of the result.
    </prop>
    <prop type="!(Preprocessor|ForkPreprocessor)" opt name="preprocess">
      The function to run on `stdout` and `stderr` before comparing it to the output. Pass an object with `stdout` and `stderr` properties for individual pre-processors.
    </prop>
  </type>
  <type type="function(string): string" name="Preprocessor" desc="The function which processes fork's outputs before returning them for asserts.">
  </type>
  <type name="ForkPreprocessor" desc="An object with `stdout` and `stderr` preprocessors.">
    <prop opt type="function(string): string" name="stdout"></prop>
    <prop opt type="function(string): string" name="stderr"></prop>
  </type>
</types>